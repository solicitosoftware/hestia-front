generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model types {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  characteristics characteristics[]
}

model characteristics {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  active      Boolean  @default(true)
  typeId      Int
  type        types    @relation(fields: [typeId], references: [id])

  @@unique([name, description, typeId])
}

model companies {
  id        Int      @id @default(autoincrement())
  name      String
  nit       String   @unique
  email     String
  phone     Int?
  address   String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model districts {
  id        Int      @id @default(autoincrement())
  name      String
  image     String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model bookings {
  id        Int      @id @default(autoincrement())
  name      String
  route     String?
  take      Int?     @default(0)
  limit     Int?     @default(1)
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              user    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model user {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  isActive      Boolean   @default(true)
  accounts      account[]
  sessions      session[]
  roles         roles[]   @relation("rolesTouser")
}

model roles {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      user[]   @relation("rolesTouser")
}

model verificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
